// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HelloRequest struct {
	Greeting             string   `protobuf:"bytes,1,opt,name=greeting,proto3" json:"greeting,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloRequest) Reset()         { *m = HelloRequest{} }
func (m *HelloRequest) String() string { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()    {}
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{0}
}

func (m *HelloRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloRequest.Unmarshal(m, b)
}
func (m *HelloRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloRequest.Marshal(b, m, deterministic)
}
func (m *HelloRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloRequest.Merge(m, src)
}
func (m *HelloRequest) XXX_Size() int {
	return xxx_messageInfo_HelloRequest.Size(m)
}
func (m *HelloRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HelloRequest proto.InternalMessageInfo

func (m *HelloRequest) GetGreeting() string {
	if m != nil {
		return m.Greeting
	}
	return ""
}

type HelloResponse struct {
	Reply                string   `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloResponse) Reset()         { *m = HelloResponse{} }
func (m *HelloResponse) String() string { return proto.CompactTextString(m) }
func (*HelloResponse) ProtoMessage()    {}
func (*HelloResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{1}
}

func (m *HelloResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloResponse.Unmarshal(m, b)
}
func (m *HelloResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloResponse.Marshal(b, m, deterministic)
}
func (m *HelloResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloResponse.Merge(m, src)
}
func (m *HelloResponse) XXX_Size() int {
	return xxx_messageInfo_HelloResponse.Size(m)
}
func (m *HelloResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HelloResponse proto.InternalMessageInfo

func (m *HelloResponse) GetReply() string {
	if m != nil {
		return m.Reply
	}
	return ""
}

type ReportNameRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReportNameRequest) Reset()         { *m = ReportNameRequest{} }
func (m *ReportNameRequest) String() string { return proto.CompactTextString(m) }
func (*ReportNameRequest) ProtoMessage()    {}
func (*ReportNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{2}
}

func (m *ReportNameRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReportNameRequest.Unmarshal(m, b)
}
func (m *ReportNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReportNameRequest.Marshal(b, m, deterministic)
}
func (m *ReportNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportNameRequest.Merge(m, src)
}
func (m *ReportNameRequest) XXX_Size() int {
	return xxx_messageInfo_ReportNameRequest.Size(m)
}
func (m *ReportNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReportNameRequest proto.InternalMessageInfo

type ReportNameResponse struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReportNameResponse) Reset()         { *m = ReportNameResponse{} }
func (m *ReportNameResponse) String() string { return proto.CompactTextString(m) }
func (*ReportNameResponse) ProtoMessage()    {}
func (*ReportNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{3}
}

func (m *ReportNameResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReportNameResponse.Unmarshal(m, b)
}
func (m *ReportNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReportNameResponse.Marshal(b, m, deterministic)
}
func (m *ReportNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportNameResponse.Merge(m, src)
}
func (m *ReportNameResponse) XXX_Size() int {
	return xxx_messageInfo_ReportNameResponse.Size(m)
}
func (m *ReportNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReportNameResponse proto.InternalMessageInfo

func (m *ReportNameResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "pb.HelloRequest")
	proto.RegisterType((*HelloResponse)(nil), "pb.HelloResponse")
	proto.RegisterType((*ReportNameRequest)(nil), "pb.ReportNameRequest")
	proto.RegisterType((*ReportNameResponse)(nil), "pb.ReportNameResponse")
}

func init() { proto.RegisterFile("server.proto", fileDescriptor_ad098daeda4239f7) }

var fileDescriptor_ad098daeda4239f7 = []byte{
	// 195 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x50, 0xcb, 0x0a, 0x82, 0x40,
	0x14, 0xcd, 0xb0, 0xb0, 0x8b, 0x41, 0xde, 0x1e, 0x84, 0xab, 0x18, 0x08, 0xa4, 0x85, 0xf4, 0xf8,
	0x80, 0xb6, 0xad, 0x5a, 0xd8, 0x17, 0x28, 0x5d, 0x24, 0x50, 0x67, 0x9a, 0x99, 0x02, 0xfb, 0xfa,
	0x48, 0xa7, 0x1a, 0x6a, 0x77, 0xcf, 0xe1, 0xbc, 0xb8, 0xe0, 0x2b, 0x92, 0x77, 0x92, 0xb1, 0x90,
	0x5c, 0x73, 0xec, 0x8a, 0x8c, 0xad, 0xc0, 0x3f, 0x50, 0x51, 0xf0, 0x84, 0xae, 0x37, 0x52, 0x1a,
	0x43, 0xf0, 0x72, 0x49, 0xa4, 0x2f, 0x55, 0x3e, 0x77, 0x16, 0x4e, 0x34, 0x48, 0x3e, 0x98, 0x2d,
	0x61, 0x68, 0xb4, 0x4a, 0xf0, 0x4a, 0x11, 0x4e, 0xa0, 0x27, 0x49, 0x14, 0xb5, 0x51, 0xb6, 0x80,
	0x8d, 0x21, 0x48, 0x48, 0x70, 0xa9, 0x8f, 0x69, 0x49, 0x26, 0x97, 0x45, 0x80, 0x36, 0x69, 0x02,
	0x10, 0xdc, 0x2a, 0x2d, 0xc9, 0xf8, 0x9b, 0x7b, 0xfb, 0x00, 0xf7, 0x4c, 0x25, 0xc7, 0x0d, 0x78,
	0xa7, 0xb4, 0x6e, 0x0a, 0x71, 0x14, 0x8b, 0x2c, 0xb6, 0x77, 0x86, 0x81, 0xc5, 0xb4, 0x61, 0xac,
	0x83, 0x7b, 0x80, 0x6f, 0x09, 0x4e, 0x5f, 0x92, 0xbf, 0x25, 0xe1, 0xec, 0x97, 0x7e, 0xdb, 0xd7,
	0x4e, 0xd6, 0x6f, 0x1e, 0xb3, 0x7b, 0x06, 0x00, 0x00, 0xff, 0xff, 0xe3, 0xf8, 0x27, 0x55, 0x28,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DemoClient is the client API for Demo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DemoClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	ReportName(ctx context.Context, in *ReportNameRequest, opts ...grpc.CallOption) (Demo_ReportNameClient, error)
}

type demoClient struct {
	cc *grpc.ClientConn
}

func NewDemoClient(cc *grpc.ClientConn) DemoClient {
	return &demoClient{cc}
}

func (c *demoClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/pb.demo/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoClient) ReportName(ctx context.Context, in *ReportNameRequest, opts ...grpc.CallOption) (Demo_ReportNameClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Demo_serviceDesc.Streams[0], "/pb.demo/ReportName", opts...)
	if err != nil {
		return nil, err
	}
	x := &demoReportNameClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Demo_ReportNameClient interface {
	Recv() (*ReportNameResponse, error)
	grpc.ClientStream
}

type demoReportNameClient struct {
	grpc.ClientStream
}

func (x *demoReportNameClient) Recv() (*ReportNameResponse, error) {
	m := new(ReportNameResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DemoServer is the server API for Demo service.
type DemoServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloResponse, error)
	ReportName(*ReportNameRequest, Demo_ReportNameServer) error
}

func RegisterDemoServer(s *grpc.Server, srv DemoServer) {
	s.RegisterService(&_Demo_serviceDesc, srv)
}

func _Demo_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.demo/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demo_ReportName_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReportNameRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DemoServer).ReportName(m, &demoReportNameServer{stream})
}

type Demo_ReportNameServer interface {
	Send(*ReportNameResponse) error
	grpc.ServerStream
}

type demoReportNameServer struct {
	grpc.ServerStream
}

func (x *demoReportNameServer) Send(m *ReportNameResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Demo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.demo",
	HandlerType: (*DemoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Demo_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReportName",
			Handler:       _Demo_ReportName_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server.proto",
}
